{"id":"random-walk","sketchJSCode":"\ndispVectors = [];\nlandingPoints = [];\ndistancesFromCenter = [];\n\n//how many vectors in your random walk\nvar howMany = 10;\n//the maximum x-y components for each leg of the walk\nvar walkLength = 40;\n//count the walks\nvar count = 1;\n\nfunction setup() {\n\n  canvas = createCanvas(600, 600);\n  canvas.parent('sketch-holder');\n\n  frameRate(25);\n\n\n\n\n  //create slider for adjusting the rate of the walks\n  rateSlider = createSlider(1, 100, 90);\n  rateSlider.parent('sketch-holder');\n  rateSlider.position(20, 60);\n  rateSlider.style('width', '150px');\n\n  //let's start walking from the center of the canvas\n  startPoint = createVector(width / 2, height / 2);\n\n}\n\n\n\nfunction draw() {\n\n  background(255);\n\n  //find average distance from center\n  var total = 0;\n  for(var i = 0; i < distancesFromCenter.length; i++) {\n      total += distancesFromCenter[i];\n  }\n  var avg = total / distancesFromCenter.length\n\n  //report interesting stats\n  push();\n  noStroke();\n  fill('black');\n  text('No. of walks: ' + count.toString(),20,20,100,20);\n  text('Avg. distance: ' + (avg.toFixed(2)).toString(),20,40,150,90);\n  pop();\n\n  push();\n  // make some circles for the background\n  noStroke();\n  fill(0,40);\n  ellipse(width/2,height/2,200,200);\n  fill(0,20);\n  ellipse(width/2,height/2,400,400);\n  fill(0,10);\n  ellipse(width/2,height/2,600,600);\n  //draw x-y axis\n  stroke(30);\n  //this draws the circle showing the average distance\n  ellipse(width/2,height/2,2*avg,2*avg)\n  drawAxes();\n  pop()\n\n\n\n  //change the rate of new walks based on the slider\n  var rate = 101-rateSlider.value();\n  //if we're on a walking frame\n  if ((frameCount-1) % rate == 0 )\n  {\n    count++;\n    // do the walk!\n    for (var i = 0; i < howMany; i++) {\n      //the first arrow starts at the center of the canvas\n      if (i==0){\n        thisStarts = startPoint;\n      }\n      //otherwise, it starts at the end of the last arrow\n      else{\n      thisStarts = dispVectors[i-1].target;\n      }\n      //make a random ending point\n      endPoint = p5.Vector.add(thisStarts, createVector(random(-walkLength, walkLength), random(-walkLength, walkLength)) )\n      dispVectors[i] = new Arrow(thisStarts, endPoint);\n      dispVectors[i].color = color(random(50,100));\n      dispVectors[i].grab = 'false';\n      dispVectors[i].draggable = 'false';\n      dispVectors[i].width=10;\n    }\n    //keep track of the final point on the walk\n    landingPoints.push(endPoint);\n    //keep track of the distances from the center\n    distancesFromCenter.push(startPoint.dist(endPoint));\n  }\n  //update all the arrows\n  for (var i = 0; i < howMany; i++) {\n    dispVectors[i].display();\n    dispVectors[i].update();\n  }\n\n  //let's keep the points displayed under 500 so things don't get too busy\n  if (landingPoints.length > 500){\n    landingPoints.shift();\n  }\n\n  //draw all the landingPoints\n  for (i=0; i < landingPoints.length; i++)\n  {\n    push();\n    noStroke();\n    //make them fade based on age.\n    fill(240,70,70,255*(1-(landingPoints.length-i)/500));\n    //the landing points are little ellipses\n    ellipse(landingPoints[i].x,landingPoints[i].y,5,5)\n    pop();\n  }\n\n\n}\n","sketchURL":"https://github.com/ccny-physics-sims/science-library/blob/d95bebf0c1f3e29b0be1cbc263d9bebae96af0af/examples/random-walk/sketch.js","repoURL":"https://github.com/ccny-physics-sims/science-library/blob/d95bebf0c1f3e29b0be1cbc263d9bebae96af0af/examples/random-walk/","version":"3c97a8260ca08222180b056bad88a88133eefacd"}
